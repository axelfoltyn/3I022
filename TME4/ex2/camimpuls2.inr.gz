{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Indiquer dans la boîte ci-dessous vos noms et prénoms**\n",
    "\n",
    "ADRIEN MAINKA 3407003"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Double-cliquer ici et remplacer par les noms et prénoms de votre binôme"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3I026 - Intelligence artificielle & Data science\n",
    "\n",
    "# TP 3 - Perceptron"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "L'objectif est d'implanter l'algorithme du perceptron de Rosenblatt, ainsi que quelques extensions, et d'évaluer leurs performances sur des données aléatoires puis réelles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import time"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rappels sur les TPs précédent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class LabeledSet:  \n",
    "    \n",
    "    def __init__(self, input_dimension):\n",
    "        self.input_dimension = input_dimension\n",
    "        self.nb_examples = 0\n",
    "    \n",
    "    def addExample(self, vector, label):\n",
    "        if (self.nb_examples == 0):\n",
    "            self.x = np.array([vector])\n",
    "            self.y = np.array([label])\n",
    "        else:\n",
    "            self.x = np.vstack((self.x,vector))\n",
    "            self.y = np.vstack((self.y,label))\n",
    "        \n",
    "        self.nb_examples = self.nb_examples + 1\n",
    "    \n",
    "    #Renvoie la dimension de l'espace d'entrée\n",
    "    def getInputDimension(self):\n",
    "        return self.input_dimension\n",
    "        \n",
    "    #Renvoie le nombre d'exemples dans le set\n",
    "    def size(self):\n",
    "        return self.nb_examples\n",
    "    \n",
    "    #Renvoie la valeur de x_i\n",
    "    def getX(self, i):\n",
    "        return self.x[i]\n",
    "            \n",
    "    #Renvoie la valeur de y_i\n",
    "    def getY(self, i):\n",
    "        return self.y[i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Classifier:\n",
    "    def __init__(self, input_dimension):\n",
    "        raise NotImplementedError(\"Please Implement this method\")\n",
    "    \n",
    "    #Permet de calculer la prediction sur x => renvoie un score\n",
    "    def predict(self, x):\n",
    "        raise NotImplementedError(\"Please Implement this method\")\n",
    "    \n",
    "    #Permet d'entrainer le modele sur un ensemble de données\n",
    "    def train(self, labeledSet):\n",
    "        raise NotImplementedError(\"Please Implement this method\")\n",
    "    \n",
    "    #Permet de calculer la qualité du système \n",
    "    def accuracy(self, dataset):\n",
    "        nb_ok = 0\n",
    "        for i in range(dataset.size()):\n",
    "            output = self.predict(dataset.getX(i))\n",
    "            if (output * dataset.getY(i) > 0):\n",
    "                nb_ok = nb_ok + 1\n",
    "        acc = nb_ok / (dataset.size() * 1.0)\n",
    "        return acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class ClassifierRandom(Classifier):\n",
    "    def __init__(self, dim):\n",
    "        self.w = np.random.rand(dim)\n",
    "\n",
    "    def predict(self, x):\n",
    "        z = np.dot(x, self.w)\n",
    "        if z > 0:\n",
    "            return +1\n",
    "        else:\n",
    "            return -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_frontiere(set, classifier, step=20):\n",
    "    mmax = set.x.max(0)\n",
    "    mmin = set.x.min(0)\n",
    "    x1grid, x2grid = np.meshgrid(np.linspace(mmin[0], mmax[0], step), np.linspace(mmin[1], mmax[1], step))\n",
    "    grid = np.hstack((x1grid.reshape(x1grid.size, 1), x2grid.reshape(x2grid.size, 1)))\n",
    "    \n",
    "    # calcul de la prediction pour chaque point de la grille\n",
    "    res = np.array([classifier.predict(grid[i,:]) for i in range(len(grid)) ])\n",
    "    res = res.reshape(x1grid.shape)\n",
    "    # tracé des frontieres\n",
    "    plt.contourf(x1grid, x2grid, res, colors=[\"red\", \"cyan\"], levels=[-1000,0,1000], linewidth=2)\n",
    "def plot2DSet(dataset):\n",
    "    \"\"\" new version that displays the marker according to the value of the point (ie -1 or 1)\n",
    "    \"\"\"\n",
    "    positive_count=0\n",
    "    negative_count=0\n",
    "    \n",
    "    \n",
    "    \n",
    "    for i in range(dataset.nb_examples):\n",
    "\n",
    "        if dataset.y[i] == -1:\n",
    "            \n",
    "            if negative_count==0:\n",
    "                negative=np.array(dataset.x[i])\n",
    "                negative_count+=1\n",
    "            else:\n",
    "                negative = np.vstack((negative, dataset.x[i]))\n",
    "                \n",
    "        elif dataset.y[i] == 1:\n",
    "            if positive_count==0:\n",
    "                positive=np.array(dataset.x[i])\n",
    "                positive_count+=1\n",
    "            else:\n",
    "                positive = np.vstack((positive, dataset.x[i]))\n",
    "        \n",
    "    plt.scatter(positive[:,0],positive[:,1],marker='o')\n",
    "    plt.scatter(negative[:,0],negative[:,1],marker='x')\n",
    "        "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Étape 1 : Perceptron de Rosenblatt\n",
    "\n",
    "\n",
    "En héritant de la classe `Classifier`, implanter le perceptron tel que décrit en cours. La fonction `train` fera une itération sur l'ensemble des données de l'apprentissage. Les points d'apprentissage seront tirés dans un ordre aléatoire."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Perceptron(Classifier):\n",
    "    \n",
    "    def __init__(self, input_dimension, learning_rate,vector=None):\n",
    "        if vector==None:\n",
    "            self.input_dimension=input_dimension\n",
    "            self.theta=np.random.rand(input_dimension)-0.5\n",
    "        else:\n",
    "            self.theta=vector\n",
    "            self.input_dimension=len(vector)\n",
    "        self.learning_rate=learning_rate\n",
    "\n",
    "        \n",
    "    \n",
    "\n",
    "        \n",
    "    def train(self,labeledSet):\n",
    "        order = np.arange(labeledSet.size())\n",
    "        \n",
    "        np.random.shuffle(order)\n",
    "        \n",
    "        for i in order:\n",
    "            if (np.dot(self.theta,labeledSet.getX(i))*labeledSet.getY(i)<= 0 ):\n",
    "                self.theta=self.theta+self.learning_rate*labeledSet.getX(i);\n",
    "    \n",
    "    def predict(self, x):\n",
    "        z = np.dot(x, self.theta)\n",
    "        if z > 0:\n",
    "            return +1\n",
    "        else:\n",
    "            return -1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La méthode `train` devra faire un nombre d'itérations fixées à la création de l'objet.\n",
    "\n",
    "Pour pouvoir évaluer la qualité de l'apprentissage au cours des itérations, on évaluera régulièrement (par exemple toutes les 10 itérations) l'accuracy du modèle, sur un ensemble de validation (un sous-ensemble de l'ensemble d'apprentissage). \n",
    "\n",
    "Après chaque apprentissage, on veillera à tracer la courbe d'apprentissage, c'est à dire le score obtenu au cours des itérations, et à tracer la frontière de décision.\n",
    "\n",
    "Tester votre code sur des données aléatoires."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "center_a1=[-5,5]\n",
    "center_a2=[5,5]\n",
    "sigma_a=[[0.5,0],[0,0.5]]\n",
    "\n",
    "center_b1=[-5,-5]\n",
    "center_b2=[5,-5]\n",
    "sigma_b=[[0.5,0],[0,0.5]]\n",
    "\n",
    "nb_points=100\n",
    "\n",
    "gaus_a1 = np.random.multivariate_normal(center_a1,sigma_a,nb_points)\n",
    "gaus_a2 = np.random.multivariate_normal(center_a2,sigma_a,nb_points)\n",
    "\n",
    "gaus_b1 = np.random.multivariate_normal(center_b1,sigma_b,nb_points)\n",
    "gaus_b2 = np.random.multivariate_normal(center_b2,sigma_b,nb_points)\n",
    "\n",
    "\n",
    "train_set = LabeledSet(2);\n",
    "\n",
    "#for tmp in gaus_a1:\n",
    " #   train_set.addExample(tmp,1)\n",
    "for tmp in gaus_a2:\n",
    "    train_set.addExample(tmp,1)\n",
    "\n",
    "for tmp in gaus_b1:\n",
    "    train_set.addExample(tmp,-1)\n",
    "#for tmp in gaus_b2:\n",
    " #   train_set.addExample(tmp,-1)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy du modèle= 1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.5/dist-packages/matplotlib/contour.py:967: UserWarning: The following kwargs were not used by contour: 'linewidth'\n",
      "  s)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f866721a908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "    \n",
    "perceptron= Perceptron(input_dimension=2,learning_rate=0.0001)\n",
    "perceptron.train(train_set)\n",
    "\n",
    "plot_frontiere(train_set,perceptron,50)\n",
    "plot2DSet(train_set)\n",
    "print (\"accuracy du modèle=\",perceptron.accuracy(train_set))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Questions**\n",
    "- Comment choisir le nombre d'itérations ?\n",
    "- Quelle est l'influence du paramètre `learning_rate`\n",
    "- Que se passe-t-il si le nombre d'exemple d'apprentissage est faible ?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) Il semble difficile de pouvoir prédire le nombre d'itération, néanmoins on remarque que le modèle s'immobilise lorsque qu'il est efficace à 100% sur les données de train\n",
    "\n",
    "2) Plus le paramètre learning_rate est élevé plus chaque modification du vecteur theta sera sera importante. Si le learning_rate est est élévé on peut avoir des oscilations pendant le train, alors qu'un petit learning_rate aura moins d'influence, mais fera forcément converger le modèle.\n",
    "\n",
    "3) Si le nombre d'exemple d'apprentissage est faible on aura un modèle qui aura sous-appris"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Étape 2: Données XOR\n",
    "\n",
    "Générer une base de données, appelée XOR par la suite, contenant:\n",
    "- deux gaussiennes centrées en (0,0) et (1,1) correspondant à des exemples positifs\n",
    "- deux gaussiennes centrées en (1,0) et (0,1) correspondant à des exemples négatifs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "center_xor1=[0,0]\n",
    "center_xor2=[1,1]\n",
    "center_xor3=[1,0]\n",
    "center_xor4=[0,1]\n",
    "\n",
    "sigma=[[0.01,0],[0,0.01]]\n",
    "\n",
    "nb_points_xor=50\n",
    "\n",
    "gaus_xor1 = np.random.multivariate_normal(center_xor1,sigma,nb_points_xor)\n",
    "gaus_xor2 = np.random.multivariate_normal(center_xor2,sigma,nb_points_xor)\n",
    "\n",
    "gaus_xor3 = np.random.multivariate_normal(center_xor3,sigma,nb_points_xor)\n",
    "gaus_xor4 = np.random.multivariate_normal(center_xor4,sigma,nb_points_xor)\n",
    "\n",
    "\n",
    "xor_set = LabeledSet(2);\n",
    "\n",
    "for tmp in gaus_xor1:\n",
    "    xor_set.addExample(tmp,1)\n",
    "for tmp in gaus_xor2:\n",
    "    xor_set.addExample(tmp,1)\n",
    "\n",
    "for tmp in gaus_xor3:\n",
    "    xor_set.addExample(tmp,-1)\n",
    "for tmp in gaus_xor4:\n",
    "    xor_set.addExample(tmp,-1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.39\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.5/dist-packages/matplotlib/contour.py:967: UserWarning: The following kwargs were not used by contour: 'linewidth'\n",
      "  s)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f866721a240>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "perceptron= Perceptron(input_dimension=2,learning_rate=0.1)\n",
    "perceptron.train(xor_set)\n",
    "\n",
    "plot_frontiere(xor_set,perceptron,50)\n",
    "plot2DSet(xor_set)\n",
    "print (perceptron.accuracy(xor_set))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Questions**\n",
    "- Que se passe-t-il quand on apprend un perceptron ?\n",
    "- Quel est le problème ?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lorsqu'on apprend un perceptron, on a un hyperplan qui sépare le domaine en deux partie et on parcourt les données une à une. Si la \n",
    "\n",
    "Si on a n données, alors il est impossible dans un espace strictement inférieur à n-1 dimension de toujours trouver un hyperplan les séparant parfaitement."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Étape 4: Protocole expérimental\n",
    "\n",
    "Attention, lorsque vous testez un classifieur, il est nécessaire de considérer à la fois un ensemble d'apprentissage et un ensemble de test. La performance doit être évaluée sur l'ensemble de test (et non pas sur l'ensemble d'apprentissage)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Évaluer les performances du perceptron selon différentes valeurs des hyper-paramètres (*learning rate*, nombre d'itérations), tracer les courbes d'apprentissage et les frontières de décisions. Commenter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voici l'ensemble de données de test et de train ainsi que la position initiale du perceptron\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.5/dist-packages/matplotlib/contour.py:967: UserWarning: The following kwargs were not used by contour: 'linewidth'\n",
      "  s)\n"
     ]
    },
    {
     "data": {
      "image/png": "